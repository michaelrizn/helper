// bd.js

window.BD = {
  "BD - SQL Databases": [
    "Описание: Базы данных с таблицами и жесткой структурой данных.",
    "Особенности: SQL-запросы, ACID транзакции, надежное хранение данных, строгая типизация.",
    "Примеры: MySQL, PostgreSQL, Oracle, SQL Server.",
    "Плюсы: Надежность, целостность данных, мощные запросы.",
    "Минусы: Сложно менять структуру и масштабировать горизонтально.",
    "Применение: Финансы, ERP, CRM системы.",
    "Типы данных: Числа, строки, даты, логические значения.",
    "Нормализация: Оптимизация структуры для уменьшения дублирования.",
    "Транзакции: Атомарные операции с гарантией выполнения.",
  ],
  "BD - NoSQL Databases": [
    "Описание: Гибкие базы данных без жесткой структуры, оптимизированные для масштабирования.",
    "Типы: Документные, графовые, ключ-значение, колоночные.",
    "Особенности: Легко масштабируются горизонтально, быстрая работа с большими объемами данных.",
    "Примеры: MongoDB, Redis, Neo4j, Cassandra.",
    "Плюсы: Масштабируемость, гибкость, производительность.",
    "Минусы: Менее надежны в плане ACID, ограничены в сложных запросах и связях.",
    "Применение: Веб, IoT, мобильные приложения.",
    "Типы данных: Документы, графы, пары ключ-значение.",
    "Масштабирование: Горизонтальное через добавление серверов.",
    "Согласованность: Может быть настроена под задачу.",
  ],
  "BD - Сравнение SQL и NoSQL": [
    "Схема: SQL - жесткая, NoSQL - гибкая.",
    "Масштабирование: SQL - вертикальное, NoSQL - горизонтальное.",
    "Транзакции: SQL - полная поддержка, NoSQL - ограниченная.",
    "Запросы: SQL - сложные, NoSQL - простые и быстрые.",
    "Целостность: SQL - строгая, NoSQL - гибкая.",
    "Скорость: NoSQL быстрее для простых операций.",
    "Гибкость: NoSQL легче изменять схему данных.",
    "Поддержка: SQL стабильнее и проверена временем.",
    "Сообщество: SQL более развито.",
    "Применение: SQL для финансов и учета, NoSQL для веб и IoT.",
  ],
  "BD - SQL - Вопросы и Ответы": [
    "Вопрос: Как выбрать данные из таблицы?",
    "Ответ: SELECT * FROM table; или SELECT column1, column2 FROM table WHERE условие;",

    "Вопрос: Разница WHERE и HAVING?",
    "Ответ: WHERE фильтрует до группировки, HAVING после.",

    "Вопрос: Как добавить записи?",
    "Ответ: INSERT INTO table (col1, col2) VALUES (val1, val2);",

    "Вопрос: Как обновить данные?",
    "Ответ: UPDATE table SET col1 = val1 WHERE condition;",

    "Вопрос: Как удалить записи?",
    "Ответ: DELETE FROM table WHERE condition;",

    "Вопрос: TRUNCATE vs DELETE?",
    "Ответ: TRUNCATE быстрее удаляет все данные без журнала.",

    "Вопрос: Что такое CTE?",
    "Ответ: Common Table Expression - временная таблица через WITH для сложных запросов.",

    "Вопрос: INNER JOIN?",
    "Ответ: Выбирает только общие данные из таблиц.",

    "Вопрос: FULL JOIN?",
    "Ответ: Все данные из обеих таблиц с NULL где нет совпадений.",

    "Вопрос: LEFT JOIN?",
    "Ответ: Все из левой таблицы плюс совпадения из правой.",

    "Вопрос: Как найти отсутствующие записи?",
    "Ответ: LEFT/RIGHT JOIN + WHERE IS NULL.",

    "Вопрос: Как убрать дубли?",
    "Ответ: DISTINCT в SELECT.",

    "Вопрос: Как сортировать?",
    "Ответ: ORDER BY column1 ASC, column2 DESC;",

    "Вопрос: GROUP BY?",
    "Ответ: Группирует данные для агрегатных функций.",

    "Вопрос: WHERE vs HAVING?",
    "Ответ: WHERE для строк, HAVING для групп.",

    "Вопрос: Как ограничить выборку?",
    "Ответ: LIMIT число_строк;",

    "Вопрос: Пагинация?",
    "Ответ: LIMIT + OFFSET.",

    "Вопрос: Как посчитать записи?",
    "Ответ: COUNT(*) WHERE условие;",

    "Вопрос: Как найти сумму?",
    "Ответ: SUM(column);",

    "Вопрос: Как найти среднее?",
    "Ответ: AVG(column) WHERE условие;",

    "Вопрос: MIN/MAX?",
    "Ответ: SELECT MIN(col), MAX(col);",

    "Вопрос: UNION vs UNION ALL?",
    "Ответ: UNION убирает дубли, UNION ALL - нет.",

    "Вопрос: Когда UNION ALL лучше?",
    "Ответ: Когда не важны дубли или их нет.",
  ],
  "BD - NoSQL - Вопросы и Ответы": [
    "Вопрос: Что такое NoSQL?",
    "Ответ: Нереляционные БД с гибкой схемой данных, оптимизированные для определенных моделей данных.",

    "Вопрос: Плюсы NoSQL?",
    "Ответ: Масштабируемость, гибкость, скорость.",

    "Вопрос: MongoDB vs SQL?",
    "Ответ: JSON документы вместо таблиц, гибкая схема.",

    "Вопрос: Минусы NoSQL?",
    "Ответ: Меньше инструментов, сложные запросы труднее.",

    "Вопрос: Как обеспечить целостность?",
    "Ответ: Через приложение и правильную модель данных.",

    "Вопрос: Когда использовать?",
    "Ответ: Для веб, IoT, больших данных.",

    "Вопрос: Что такое шардинг?",
    "Ответ: Разделение данных по разным серверам.",

    "Вопрос: Индексы в NoSQL?",
    "Ответ: Ускоряют поиск, но требуют памяти.",

    "Вопрос: CAP теорема?",
    "Ответ: Выбор между согласованностью (Consistency), доступностью (Availability) и устойчивостью к разделению (Partition tolerance).",

    "Вопрос: Инструменты мониторинга?",
    "Ответ: Atlas, Prometheus, специальные решения.",
  ],
  "BD - Общие вопросы по базам данных": [
    "Вопрос: База данных - это?",
    "Ответ: Структурированное хранилище данных.",

    "Вопрос: Что такое СУБД?",
    "Ответ: Система управления базами данных.",

    "Вопрос: Нормализация?",
    "Ответ: Оптимизация структуры БД для минимизации избыточности и зависимостей.",

    "Вопрос: Primary vs Unique Key?",
    "Ответ: Primary не может быть NULL, Unique может.",

    "Вопрос: Транзакции?",
    "Ответ: Атомарные операции с гарантиями ACID (атомарность, согласованность, изолированность, долговечность).",

    "Вопрос: Безопасность БД?",
    "Ответ: Доступ, шифрование, аудит, защита от атак.",

    "Вопрос: Бэкапы?",
    "Ответ: Копии данных для восстановления.",

    "Вопрос: Индексы?",
    "Ответ: Ускоряют поиск, замедляют запись.",

    "Вопрос: Денормализация?",
    "Ответ: Избыточность для скорости чтения.",

    "Вопрос: Репликация?",
    "Ответ: Копирование данных для надежности.",
  ],
};
