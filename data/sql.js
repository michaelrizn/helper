// sql.js

window.SQL = {
  "SQL - SELECT": [
    "Описание: Используется для выбора данных из базы данных.",
    "Пример: `SELECT column1, column2 FROM table_name;`",
    "Вопрос на собеседовании: Как выбрать все столбцы из таблицы и как выбрать только определенные столбцы?",
    "Дополнительно: Использование ключевых слов DISTINCT, WHERE, ORDER BY для более точного выбора данных.",
  ],
  "SQL - WHERE": [
    "Описание: Фильтрует записи, соответствующие определенному условию.",
    "Пример: `SELECT * FROM users WHERE age > 18;`",
    "Вопрос на собеседовании: В чем разница между WHERE и HAVING в SQL?",
    "Дополнительно: WHERE используется для фильтрации строк до группировки, HAVING — для фильтрации после группировки.",
  ],
  "SQL - INSERT": [
    "Описание: Вставляет новые строки в таблицу.",
    "Пример: `INSERT INTO table_name (column1, column2) VALUES (value1, value2);`",
    "Вопрос на собеседовании: Как добавить несколько записей в таблицу за один запрос?",
    "Дополнительно: Использование множественных наборов значений, например, `INSERT INTO table_name (column1, column2) VALUES (value1, value2), (value3, value4);`",
  ],
  "SQL - UPDATE": [
    "Описание: Обновляет существующие записи в таблице.",
    "Пример: `UPDATE table_name SET column1 = value1 WHERE condition;`",
    "Вопрос на собеседовании: Как обновить несколько столбцов одновременно в одной записи?",
    "Дополнительно: Можно использовать множественные присваивания, например, `UPDATE table_name SET column1 = value1, column2 = value2 WHERE condition;`",
  ],
  "SQL - DELETE": [
    "Описание: Удаляет строки из таблицы по условию.",
    "Пример: `DELETE FROM table_name WHERE condition;`",
    "Вопрос на собеседовании: Как удалить определенные записи из таблицы и как предотвратить случайное удаление всех данных?",
    "Дополнительно: Использование транзакций и резервного копирования для предотвращения потери данных.",
  ],
  "SQL - TRUNCATE": [
    "Описание: Удаляет все строки из таблицы быстрее, чем DELETE.",
    "Пример: `TRUNCATE TABLE table_name;`",
    "Вопрос на собеседовании: Чем команда TRUNCATE отличается от DELETE и в каких ситуациях ее лучше применять?",
    "Дополнительно: TRUNCATE сбрасывает автоинкрементные счетчики и не может быть использован с WHERE.",
  ],
  "SQL - WITH (CTE)": [
    "Описание: Позволяет объявить временную таблицу (Common Table Expression) в начале запроса.",
    "Пример: `WITH cte_name AS (SELECT column_name FROM table WHERE condition) SELECT * FROM cte_name;`",
    "Вопрос на собеседовании: Что такое CTE (Common Table Expression) и как его использовать в сложных запросах?",
    "Дополнительно: CTE могут быть рекурсивными и использоваться для упрощения чтения и поддержки сложных запросов.",
  ],
  "SQL - INNER JOIN": [
    "Описание: Возвращает строки, где есть совпадения между таблицами A и B по ключу.",
    "Пример: `SELECT * FROM A INNER JOIN B ON A.key = B.key;`",
    "Вопрос на собеседовании: В каком случае следует использовать INNER JOIN и какие данные он возвращает?",
    "Дополнительно: INNER JOIN исключает строки без соответствий в обеих таблицах.",
  ],
  "SQL - FULL JOIN": [
    "Описание: Возвращает строки, где есть совпадения либо в таблице A, либо в таблице B, включая все данные из обеих таблиц.",
    "Пример: `SELECT * FROM A FULL JOIN B ON A.key = B.key;`",
    "Вопрос на собеседовании: Чем FULL JOIN отличается от INNER JOIN и когда его стоит применять?",
    "Дополнительно: FULL JOIN включает все записи из обеих таблиц, заполняя NULL там, где нет соответствий.",
  ],
  "SQL - FULL JOIN (WITH NULL CHECK)": [
    "Описание: Возвращает строки, где нет совпадений между таблицами A и B, захватывая только неподходящие строки из обеих таблиц.",
    "Пример: `SELECT * FROM A FULL JOIN B ON A.key = B.key WHERE A.key IS NULL OR B.key IS NULL;`",
    "Вопрос на собеседовании: Как получить строки, которые отсутствуют в одной из таблиц при использовании FULL JOIN?",
    "Дополнительно: Использование WHERE с проверкой на NULL позволяет выделить несовпадающие записи.",
  ],
  "SQL - LEFT JOIN": [
    "Описание: Возвращает все строки из таблицы A вместе с совпадающими строками из таблицы B. Если совпадений нет, столбцы из B будут NULL.",
    "Пример: `SELECT * FROM A LEFT JOIN B ON A.key = B.key;`",
    "Вопрос на собеседовании: Для чего используется LEFT JOIN и как он работает?",
    "Дополнительно: LEFT JOIN используется, когда нужно получить все записи из одной таблицы и соответствующие записи из другой.",
  ],
  "SQL - LEFT JOIN (WITH NULL CHECK)": [
    "Описание: Выбирает строки из таблицы A, которые не имеют соответствий в таблице B.",
    "Пример: `SELECT * FROM A LEFT JOIN B ON A.key = B.key WHERE B.key IS NULL;`",
    "Вопрос на собеседовании: Как получить записи из первой таблицы, для которых нет соответствующих записей во второй таблице?",
    "Дополнительно: Такая конструкция часто используется для поиска «лишних» записей или для выявления отсутствующих данных.",
  ],
  "SQL - RIGHT JOIN": [
    "Описание: Возвращает все строки из таблицы B вместе с совпадающими строками из таблицы A. Если совпадений нет, столбцы из A будут NULL.",
    "Пример: `SELECT * FROM A RIGHT JOIN B ON A.key = B.key;`",
    "Вопрос на собеседовании: В чем отличие RIGHT JOIN от LEFT JOIN и когда его лучше использовать?",
    "Дополнительно: RIGHT JOIN полезен, когда необходимо сохранить все записи из второй таблицы.",
  ],
  "SQL - RIGHT JOIN (WITH NULL CHECK)": [
    "Описание: Выбирает строки из таблицы B, которые не имеют соответствий в таблице A.",
    "Пример: `SELECT * FROM A RIGHT JOIN B ON A.key = B.key WHERE A.key IS NULL;`",
    "Вопрос на собеседовании: Как получить записи из второй таблицы, для которых нет соответствующих записей в первой таблице?",
    "Дополнительно: Аналогично LEFT JOIN с NULL-проверкой, но для второй таблицы.",
  ],
  "SQL - DISTINCT": [
    "Описание: Удаляет дублирующиеся строки из результата запроса.",
    "Пример: `SELECT DISTINCT column_name FROM table;`",
    "Вопрос на собеседовании: Как удалить повторяющиеся значения в результате запроса?",
    "Дополнительно: DISTINCT применяется к выбранным столбцам, чтобы вернуть только уникальные комбинации значений.",
  ],
  "SQL - ORDER BY": [
    "Описание: Сортирует строки по указанным столбцам (по умолчанию по возрастанию).",
    "Пример: `SELECT name, age FROM users ORDER BY age DESC;`",
    "Вопрос на собеседовании: Как отсортировать результаты запроса по нескольким столбцам?",
    "Дополнительно: Можно указать направление сортировки для каждого столбца, например, `ORDER BY column1 ASC, column2 DESC;`",
  ],
  "SQL - GROUP BY": [
    "Описание: Группирует строки по указанным столбцам для агрегации данных.",
    "Пример: `SELECT department, COUNT(*) AS num_employees FROM employees GROUP BY department;`",
    "Вопрос на собеседовании: Для чего используется оператор GROUP BY и как он работает вместе с агрегатными функциями?",
    "Дополнительно: GROUP BY используется с агрегатными функциями (COUNT, SUM, AVG и др.) для получения сводных данных.",
  ],
  "SQL - HAVING": [
    "Описание: Фильтрует агрегированные данные после группировки.",
    "Пример: `SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 50000;`",
    "Вопрос на собеседовании: В чем отличие WHERE от HAVING и когда использовать HAVING?",
    "Дополнительно: HAVING применяется для фильтрации групп, тогда как WHERE — для фильтрации отдельных строк до группировки.",
  ],
  "SQL - LIMIT": [
    "Описание: Ограничивает количество возвращаемых строк в результате запроса.",
    "Пример: `SELECT * FROM users LIMIT 10;`",
    "Вопрос на собеседовании: Как ограничить количество возвращаемых записей в SQL-запросе?",
    "Дополнительно: LIMIT часто используется вместе с OFFSET для реализации пагинации.",
  ],
  "SQL - OFFSET": [
    "Описание: Пропускает указанное количество строк перед началом вывода результата.",
    "Пример: `SELECT * FROM users ORDER BY age OFFSET 5 LIMIT 10;`",
    "Вопрос на собеседовании: Как использовать OFFSET для реализации пагинации в запросах?",
    "Дополнительно: OFFSET позволяет выбирать страницы данных, пропуская предыдущие записи.",
  ],
  "SQL - COUNT()": [
    "Описание: Возвращает количество строк, удовлетворяющих условию.",
    "Пример: `SELECT COUNT(*) FROM users WHERE age > 18;`",
    "Вопрос на собеседовании: Как подсчитать количество записей, соответствующих определенному условию?",
    "Дополнительно: COUNT(column_name) подсчитывает только непустые значения указанного столбца.",
  ],
  "SQL - SUM()": [
    "Описание: Возвращает сумму значений в столбце.",
    "Пример: `SELECT SUM(salary) FROM employees;`",
    "Вопрос на собеседовании: Как вычислить общую сумму значений в определенном столбце таблицы?",
    "Дополнительно: SUM может использоваться вместе с GROUP BY для получения сумм по группам.",
  ],
  "SQL - AVG()": [
    "Описание: Вычисляет среднее значение столбца.",
    "Пример: `SELECT AVG(salary) FROM employees WHERE department = 'Sales';`",
    "Вопрос на собеседовании: Как найти среднее значение по столбцу с учетом определенных условий?",
    "Дополнительно: AVG может использоваться для анализа производительности или финансовых показателей.",
  ],
  "SQL - MAX() / MIN()": [
    "Описание: Находят максимальное и минимальное значения в столбце.",
    "Пример: `SELECT MAX(age), MIN(age) FROM users;`",
    "Вопрос на собеседовании: Как получить максимальное и минимальное значения из столбца в таблице?",
    "Дополнительно: MAX и MIN могут использоваться с другими агрегатными функциями для комплексного анализа данных.",
  ],
  "SQL - UNION": [
    "Описание: Объединяет результаты двух запросов, удаляя дублирующиеся строки.",
    "Пример: `SELECT column_name FROM table1 UNION SELECT column_name FROM table2;`",
    "Вопрос на собеседовании: В чем разница между UNION и UNION ALL?",
    "Дополнительно: UNION использует DISTINCT по умолчанию, чтобы удалить дублирующиеся записи.",
  ],
  "SQL - UNION ALL": [
    "Описание: Объединяет результаты двух запросов, включая дублирующиеся строки.",
    "Пример: `SELECT column_name FROM table1 UNION ALL SELECT column_name FROM table2;`",
    "Вопрос на собеседовании: Когда предпочтительнее использовать UNION ALL вместо UNION?",
    "Дополнительно: UNION ALL быстрее, так как не выполняет удаление дубликатов, и полезен, когда дублирование записей допустимо или требуется.",
  ],
  "SQL - CREATE TABLE": [
    "Описание: Создает новую таблицу в базе данных с указанными столбцами и их типами.",
    "Пример: `CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(100), age INT, department VARCHAR(50));`",
    "Вопрос на собеседовании: Как создать таблицу с первичным ключом и внешним ключом?",
    "Дополнительно: Использование ограничений (CONSTRAINT) для обеспечения целостности данных.",
  ],
  "SQL - ALTER TABLE": [
    "Описание: Изменяет структуру существующей таблицы, добавляя, изменяя или удаляя столбцы и ограничения.",
    "Пример: `ALTER TABLE employees ADD COLUMN salary DECIMAL(10, 2);`",
    "Вопрос на собеседовании: Как добавить новый столбец в существующую таблицу?",
    "Дополнительно: ALTER TABLE может использоваться для переименования таблиц и столбцов, изменения типов данных и добавления ограничений.",
  ],
  "SQL - DROP TABLE": [
    "Описание: Удаляет таблицу из базы данных вместе со всеми данными и структурой.",
    "Пример: `DROP TABLE employees;`",
    "Вопрос на собеседовании: Как безопасно удалить таблицу, не затрагивая связанные данные?",
    "Дополнительно: Использование CASCADE для удаления зависимостей или RESTRICT для предотвращения удаления, если есть зависимости.",
  ],
  "SQL - INDEX": [
    "Описание: Создает индекс на одном или нескольких столбцах таблицы для ускорения поиска и сортировки.",
    "Пример: `CREATE INDEX idx_age ON users(age);`",
    "Вопрос на собеседовании: Какие типы индексов существуют и когда их использовать?",
    "Дополнительно: B-tree, Hash, GiST, SP-GiST, GIN и BRIN — различные типы индексов для разных типов запросов и данных.",
  ],
  "SQL - PRIMARY KEY": [
    "Описание: Уникальный идентификатор каждой записи в таблице.",
    "Пример: `id INT PRIMARY KEY` в определении таблицы.",
    "Вопрос на собеседовании: Что такое первичный ключ и почему он важен?",
    "Дополнительно: Первичный ключ обеспечивает уникальность записей и используется для установления связей между таблицами.",
  ],
  "SQL - FOREIGN KEY": [
    "Описание: Поле или набор полей в одной таблице, которые ссылаются на первичный ключ другой таблицы.",
    "Пример: `CREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, FOREIGN KEY (user_id) REFERENCES users(id));`",
    "Вопрос на собеседовании: Как создать внешний ключ и зачем он нужен?",
    "Дополнительно: Внешние ключи обеспечивают целостность данных, предотвращая создание ссылок на несуществующие записи.",
  ],
  "SQL - UNIQUE": [
    "Описание: Ограничение, которое гарантирует уникальность значений в столбце.",
    "Пример: `email VARCHAR(100) UNIQUE` в определении таблицы.",
    "Вопрос на собеседовании: Как обеспечить уникальность значений в столбце без использования первичного ключа?",
    "Дополнительно: UNIQUE может применяться к одному или нескольким столбцам для обеспечения уникальности комбинации значений.",
  ],
  "SQL - NOT NULL": [
    "Описание: Ограничение, которое запрещает хранение NULL-значений в столбце.",
    "Пример: `name VARCHAR(100) NOT NULL` в определении таблицы.",
    "Вопрос на собеседовании: Как предотвратить вставку NULL-значений в определенный столбец?",
    "Дополнительно: NOT NULL используется для обязательных полей, которые должны содержать данные.",
  ],
  "SQL - DEFAULT": [
    "Описание: Устанавливает значение по умолчанию для столбца, если при вставке записи значение не указано.",
    "Пример: `created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP` в определении таблицы.",
    "Вопрос на собеседовании: Как задать значение по умолчанию для столбца в таблице?",
    "Дополнительно: DEFAULT может использоваться для автоматической установки значений, таких как даты, счетчики и другие стандартные значения.",
  ],
  "SQL - CASE": [
    "Описание: Условный оператор для выполнения логики, аналогичной if-else в программировании.",
    "Пример: `SELECT name, CASE WHEN age >= 18 THEN 'Adult' ELSE 'Minor' END AS status FROM users;`",
    "Вопрос на собеседовании: Как использовать оператор CASE для создания условных вычислений в запросе?",
    "Дополнительно: CASE может быть использован в SELECT, WHERE, ORDER BY и других частях запроса для динамической обработки данных.",
  ],
  "SQL - SUBQUERY": [
    "Описание: Вложенный запрос внутри другого запроса для получения промежуточных результатов.",
    "Пример: `SELECT name FROM users WHERE id IN (SELECT user_id FROM orders WHERE amount > 100);`",
    "Вопрос на собеседовании: Что такое подзапрос и какие типы подзапросов существуют?",
    "Дополнительно: Подзапросы могут быть коррелированными и некоррелированными, использоваться в различных частях запроса (SELECT, FROM, WHERE).",
  ],
  "SQL - EXISTS": [
    "Описание: Проверяет наличие записей, соответствующих условию в подзапросе.",
    "Пример: `SELECT name FROM users u WHERE EXISTS (SELECT 1 FROM orders o WHERE o.user_id = u.id);`",
    "Вопрос на собеседовании: Как использовать оператор EXISTS для проверки существования записей в подзапросе?",
    "Дополнительно: EXISTS возвращает TRUE, если подзапрос возвращает хотя бы одну запись.",
  ],
  "SQL - DISTINCT ON": [
    "Описание: Позволяет выбрать уникальные строки на основе определенных столбцов, сохраняя при этом остальные столбцы.",
    "Пример: `SELECT DISTINCT ON (department) department, employee_name, salary FROM employees ORDER BY department, salary DESC;`",
    "Вопрос на собеседовании: Как использовать DISTINCT ON для выбора уникальных записей по определённым столбцам?",
    "Дополнительно: DISTINCT ON доступен в некоторых СУБД, таких как PostgreSQL.",
  ],
  "SQL - WINDOW FUNCTIONS": [
    "Описание: Выполняют агрегатные функции по окну строк, не группируя их.",
    "Пример: `SELECT employee_name, salary, AVG(salary) OVER (PARTITION BY department) AS avg_department_salary FROM employees;`",
    "Вопрос на собеседовании: Что такое оконные функции и как их использовать для анализа данных?",
    "Дополнительно: Оконные функции позволяют выполнять вычисления, такие как ранжирование, накопительные суммы и скользящие средние.",
  ],
};
