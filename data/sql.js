window.SQL = {
  "SQL - SELECT": [
    "Описание: Выбор данных из базы данных",
    "Пример: `SELECT column1, column2 FROM table_name;`",
    "Вопрос: Как выбрать все или определенные столбцы из таблицы? Ответ: Используйте SELECT * для выбора всех столбцов или перечислите нужные столбцы через запятую",
    "Дополнительно: Использование DISTINCT, WHERE, ORDER BY для уточнения выборки",
  ],

  "SQL - WHERE": [
    "Описание: Фильтрация записей по условию",
    "Пример: `SELECT * FROM users WHERE age > 18;`",
    "Вопрос: Отличие WHERE от HAVING? Ответ: WHERE фильтрует отдельные строки до группировки, HAVING фильтрует сгруппированные результаты после GROUP BY",
    "Дополнительно: WHERE фильтрует до группировки, HAVING - после",
  ],

  "SQL - INSERT": [
    "Описание: Добавление новых записей в таблицу",
    "Пример: `INSERT INTO table_name (column1) VALUES (value1);`",
    "Вопрос: Как добавить несколько записей одним запросом? Ответ: Используйте множественный VALUES: INSERT INTO table (col) VALUES (val1), (val2), (val3)",
    "Дополнительно: VALUES (value1), (value2), (value3)",
  ],

  "SQL - UPDATE": [
    "Описание: Изменение существующих записей",
    "Пример: `UPDATE table_name SET column1 = value1;`",
    "Вопрос: Как обновить несколько столбцов? Ответ: Перечислите обновляемые столбцы через запятую: UPDATE table SET col1 = val1, col2 = val2",
    "Дополнительно: SET col1 = val1, col2 = val2",
  ],

  "SQL - DELETE": [
    "Описание: Удаление записей по условию",
    "Пример: `DELETE FROM table_name WHERE condition;`",
    "Вопрос: Как безопасно удалить записи? Ответ: Используйте транзакции (BEGIN/COMMIT) и предварительно сделайте бэкап данных",
    "Дополнительно: Использование транзакций и бэкапов",
  ],

  "SQL - TRUNCATE": [
    "Описание: Быстрое удаление всех данных из таблицы",
    "Пример: `TRUNCATE TABLE table_name;`",
    "Вопрос: Отличие от DELETE? Ответ: TRUNCATE быстрее, сбрасывает автоинкремент, нельзя откатить, не активирует триггеры",
    "Дополнительно: Нельзя отменить, быстрее DELETE",
    "Особенности: DDL операция, сброс автоинкремента",
    "Преимущества: Освобождает место на диске",
    "Недостатки: Требует высоких прав",
    "Пример использования: Очистка логов",
    "Рекомендации: Проверять внешние ключи",
  ],

  "SQL - WITH": [
    "Описание: Временная таблица для запроса",
    "Пример: `WITH cte AS (SELECT...) SELECT * FROM cte;`",
    "Вопрос: Для чего нужны CTE? Ответ: Для создания временных именованных наборов данных, упрощения сложных запросов и рекурсивных выборок",
    "Дополнительно: Упрощает сложные запросы",
  ],

  "SQL - INNER JOIN": [
    "Описание: Выборка совпадающих записей из таблиц",
    "Пример: `SELECT * FROM A JOIN B ON A.id = B.id;`",
    "Вопрос: Когда использовать INNER JOIN? Ответ: Когда нужно получить только те записи, которые имеют соответствия в обеих таблицах",
    "Дополнительно: Исключает несовпадающие записи",
  ],

  "SQL - FULL JOIN": [
    "Описание: Все записи из обеих таблиц",
    "Пример: `SELECT * FROM A FULL JOIN B ON A.id = B.id;`",
    "Вопрос: Отличие от INNER JOIN? Ответ: FULL JOIN возвращает все записи из обеих таблиц, даже если нет соответствий",
    "Дополнительно: NULL для несовпадающих",
  ],

  "SQL - FULL JOIN (NULL CHECK)": [
    "Описание: Только несовпадающие записи",
    "Пример: `FULL JOIN WHERE A.id IS NULL OR B.id IS NULL;`",
    "Вопрос: Как найти отсутствующие записи? Ответ: Использовать FULL JOIN с проверкой IS NULL для идентификаторов",
    "Дополнительно: Проверка на NULL",
  ],

  "SQL - LEFT JOIN": [
    "Описание: Все из первой + совпадения из второй",
    "Пример: `SELECT * FROM A LEFT JOIN B ON A.id = B.id;`",
    "Вопрос: Зачем нужен LEFT JOIN? Ответ: Когда нужно получить все записи из левой таблицы, даже если нет соответствий в правой",
    "Дополнительно: NULL для отсутствующих в B",
  ],

  "SQL - LEFT JOIN (NULL CHECK)": [
    "Описание: Записи только из первой таблицы",
    "Пример: `LEFT JOIN WHERE B.id IS NULL;`",
    "Вопрос: Как найти уникальные для A записи? Ответ: Использовать LEFT JOIN с проверкой IS NULL для правой таблицы",
    "Дополнительно: Поиск отсутствующих данных",
  ],

  "SQL - RIGHT JOIN": [
    "Описание: Все из второй + совпадения из первой",
    "Пример: `SELECT * FROM A RIGHT JOIN B ON A.id = B.id;`",
    "Вопрос: Отличие от LEFT JOIN? Ответ: RIGHT JOIN сохраняет все записи из правой таблицы вместо левой",
    "Дополнительно: NULL для отсутствующих в A",
  ],

  "SQL - RIGHT JOIN (NULL CHECK)": [
    "Описание: Записи только из второй таблицы",
    "Пример: `RIGHT JOIN WHERE A.id IS NULL;`",
    "Вопрос: Как найти уникальные для B записи? Ответ: Использовать RIGHT JOIN с проверкой IS NULL для левой таблицы",
    "Дополнительно: Аналог LEFT JOIN NULL CHECK",
  ],

  "SQL - DISTINCT": [
    "Описание: Удаление дубликатов",
    "Пример: `SELECT DISTINCT col FROM table;`",
    "Вопрос: Как убрать повторы? Ответ: Использовать ключевое слово DISTINCT перед списком столбцов",
    "Дополнительно: Уникальные комбинации значений",
  ],

  "SQL - ORDER BY": [
    "Описание: Сортировка результатов",
    "Пример: `SELECT * FROM table ORDER BY col DESC;`",
    "Вопрос: Как отсортировать по нескольким полям? Ответ: Перечислить поля через запятую: ORDER BY col1 ASC, col2 DESC",
    "Дополнительно: ASC/DESC для каждого поля",
  ],

  "SQL - GROUP BY": [
    "Описание: Группировка для агрегации",
    "Пример: `SELECT dept, COUNT(*) FROM emp GROUP BY dept;`",
    "Вопрос: Как работает с агрегатными функциями? Ответ: Группирует записи и применяет агрегатные функции к каждой группе",
    "Дополнительно: COUNT, SUM, AVG и др.",
  ],

  "SQL - HAVING": [
    "Описание: Фильтр после группировки",
    "Пример: `GROUP BY dept HAVING COUNT(*) > 5;`",
    "Вопрос: WHERE или HAVING? Ответ: WHERE для фильтрации до группировки, HAVING для фильтрации сгруппированных данных",
    "Дополнительно: Для агрегированных данных",
  ],

  "SQL - LIMIT": [
    "Описание: Ограничение количества строк",
    "Пример: `SELECT * FROM table LIMIT 10;`",
    "Вопрос: Как ограничить выборку? Ответ: Использовать LIMIT n, где n - максимальное количество возвращаемых строк",
    "Дополнительно: Для пагинации с OFFSET",
  ],

  "SQL - OFFSET": [
    "Описание: Пропуск начальных строк",
    "Пример: `SELECT * FROM table OFFSET 10;`",
    "Вопрос: Как реализовать пагинацию? Ответ: Комбинировать LIMIT и OFFSET: LIMIT 10 OFFSET 20 для второй страницы",
    "Дополнительно: Используется с LIMIT",
  ],

  "SQL - COUNT": [
    "Описание: Подсчет строк",
    "Пример: `SELECT COUNT(*) FROM table;`",
    "Вопрос: Как посчитать записи? Ответ: Использовать COUNT(*) для всех записей или COUNT(column) для непустых значений",
    "Дополнительно: COUNT(col) - без NULL",
  ],

  "SQL - SUM": [
    "Описание: Сумма значений",
    "Пример: `SELECT SUM(salary) FROM emp;`",
    "Вопрос: Как посчитать общую сумму? Ответ: Использовать функцию SUM() для числового столбца",
    "Дополнительно: Для числовых полей",
  ],

  "SQL - AVG": [
    "Описание: Среднее значение",
    "Пример: `SELECT AVG(price) FROM products;`",
    "Вопрос: Как найти среднее? Ответ: Использовать функцию AVG() для числового столбца",
    "Дополнительно: Для анализа данных",
  ],

  "SQL - MAX/MIN": [
    "Описание: Максимум/минимум в столбце",
    "Пример: `SELECT MAX(age), MIN(age) FROM users;`",
    "Вопрос: Как найти крайние значения? Ответ: Использовать функции MAX() и MIN() для соответствующих столбцов",
    "Дополнительно: Для агрегации данных",
  ],

  "SQL - UNION": [
    "Описание: Объединение без дубликатов",
    "Пример: `SELECT col FROM t1 UNION SELECT col FROM t2;`",
    "Вопрос: Отличие от UNION ALL? Ответ: UNION удаляет дубликаты, UNION ALL сохраняет все записи",
    "Дополнительно: Автоматический DISTINCT",
  ],

  "SQL - UNION ALL": [
    "Описание: Объединение с дубликатами",
    "Пример: `SELECT col FROM t1 UNION ALL SELECT col FROM t2;`",
    "Вопрос: Когда использовать? Ответ: Когда нужно сохранить дубликаты и важна производительность",
    "Дополнительно: Быстрее чем UNION",
  ],

  "SQL - CREATE TABLE": [
    "Описание: Создание таблицы",
    "Пример: `CREATE TABLE users (id INT PRIMARY KEY);`",
    "Вопрос: Как создать с ключами? Ответ: Определить PRIMARY KEY, FOREIGN KEY и другие ограничения при создании таблицы",
    "Дополнительно: Ограничения и типы данных",
  ],

  "SQL - ALTER TABLE": [
    "Описание: Изменение структуры таблицы",
    "Пример: `ALTER TABLE users ADD COLUMN age INT;`",
    "Вопрос: Как добавить столбец? Ответ: Использовать ALTER TABLE ADD COLUMN с указанием имени и типа столбца",
    "Дополнительно: Изменение и удаление полей",
  ],

  "SQL - DROP TABLE": [
    "Описание: Удаление таблицы",
    "Пример: `DROP TABLE users;`",
    "Вопрос: Как безопасно удалить? Ответ: Использовать IF EXISTS и учитывать зависимости через CASCADE/RESTRICT",
    "Дополнительно: CASCADE и RESTRICT",
  ],

  "SQL - INDEX": [
    "Описание: Ускорение поиска",
    "Пример: `CREATE INDEX idx ON users(email);`",
    "Вопрос: Типы индексов? Ответ: B-tree (по умолчанию), Hash, GiST, SP-GiST, GIN, BRIN",
    "Дополнительно: B-tree, Hash и др.",
  ],

  "SQL - PRIMARY KEY": [
    "Описание: Уникальный идентификатор",
    "Пример: `id INT PRIMARY KEY`",
    "Вопрос: Зачем нужен? Ответ: Для уникальной идентификации записей и создания связей между таблицами",
    "Дополнительно: Для связей между таблицами",
  ],

  "SQL - FOREIGN KEY": [
    "Описание: Ссылка на другую таблицу",
    "Пример: `FOREIGN KEY (user_id) REFERENCES users(id)`",
    "Вопрос: Как создать связь? Ответ: Определить FOREIGN KEY, указывающий на PRIMARY KEY другой таблицы",
    "Дополнительно: Целостность данных",
  ],

  "SQL - UNIQUE": [
    "Описание: Уникальность значений",
    "Пример: `email VARCHAR(100) UNIQUE`",
    "Вопрос: Отличие от PRIMARY KEY? Ответ: UNIQUE допускает NULL и может быть несколько в таблице",
    "Дополнительно: Для нескольких полей",
  ],

  "SQL - NOT NULL": [
    "Описание: Запрет пустых значений",
    "Пример: `name VARCHAR(100) NOT NULL`",
    "Вопрос: Как запретить NULL? Ответ: Добавить ограничение NOT NULL при создании или изменении столбца",
    "Дополнительно: Для обязательных полей",
  ],

  "SQL - DEFAULT": [
    "Описание: Значение по умолчанию",
    "Пример: `created_at TIMESTAMP DEFAULT NOW()`",
    "Вопрос: Как задать значение? Ответ: Использовать DEFAULT при определении столбца с константой или функцией",
    "Дополнительно: Для автозаполнения",
  ],

  "SQL - CASE": [
    "Описание: Условное выражение",
    "Пример: `CASE WHEN age >= 18 THEN 'Adult' END`",
    "Вопрос: Как использовать? Ответ: CASE WHEN условие THEN результат [ELSE альтернатива] END",
    "Дополнительно: В разных частях запроса",
  ],

  "SQL - SUBQUERY": [
    "Описание: Вложенный запрос",
    "Пример: `WHERE id IN (SELECT id FROM...)`",
    "Вопрос: Типы подзапросов? Ответ: Скалярные (одно значение), строчные (одна строка), табличные (набор данных)",
    "Дополнительно: В SELECT, FROM, WHERE",
  ],

  "SQL - EXISTS": [
    "Описание: Проверка существования",
    "Пример: `WHERE EXISTS (SELECT 1 FROM...)`",
    "Вопрос: Как проверить наличие? Ответ: Использовать EXISTS с подзапросом, возвращает true если подзапрос возвращает строки",
    "Дополнительно: Возвращает TRUE/FALSE",
  ],

  "SQL - DISTINCT ON": [
    "Описание: Уникальные строки по полям",
    "Пример: `DISTINCT ON (dept) dept, name`",
    "Вопрос: Как использовать? Ответ: DISTINCT ON (columns) возвращает первую строку каждой группы указанных столбцов",
    "Дополнительно: Только в PostgreSQL",
  ],

  "SQL - WINDOW": [
    "Описание: Оконные функции",
    "Пример: `AVG() OVER (PARTITION BY dept)`",
    "Вопрос: Для чего нужны? Ответ: Для вычисления агрегатных значений по группам без группировки всего результата",
    "Дополнительно: Для аналитики",
  ],

  "SQL - TRANSACTION": [
    "Описание: Атомарные операции",
    "Пример: `BEGIN; UPDATE...; COMMIT;`",
    "Вопрос: Что такое ACID? Ответ: Atomicity (атомарность), Consistency (согласованность), Isolation (изолированность), Durability (долговечность)",
    "Дополнительно: Для целостности данных",
  ],

  "SQL - VIEW": [
    "Описание: Виртуальная таблица",
    "Пример: `CREATE VIEW v AS SELECT...`",
    "Вопрос: Преимущества? Ответ: Упрощение сложных запросов, безопасность данных, абстракция логики",
    "Дополнительно: Упрощение запросов",
  ],

  "SQL - STORED PROCEDURE": [
    "Описание: Хранимая процедура",
    "Пример: `CREATE PROCEDURE name()...`",
    "Вопрос: Зачем нужны? Ответ: Для инкапсуляции бизнес-логики, повторного использования кода, безопасности",
    "Дополнительно: Для бизнес-логики",
  ],

  "SQL - TRIGGER": [
    "Описание: Автоматические действия",
    "Пример: `CREATE TRIGGER name BEFORE UPDATE...`",
    "Вопрос: Когда использовать? Ответ: Для автоматизации действий при изменении данных, аудита, проверки целостности",
    "Дополнительно: Для аудита изменений",
  ],

  "SQL - GRANT/REVOKE": [
    "Описание: Управление доступом",
    "Пример: `GRANT SELECT ON table TO user`",
    "Вопрос: Как настроить права? Ответ: Использовать GRANT для предоставления и REVOKE для отзыва прав доступа",
    "Дополнительно: Принцип минимальности",
  ],

  "SQL - BACKUP/RESTORE": [
    "Описание: Резервное копирование",
    "Пример: `BACKUP DATABASE db TO DISK`",
    "Вопрос: Типы бэкапов? Ответ: Полный (все данные), дифференциальный (изменения с последнего полного), инкрементный (изменения с последнего любого)",
    "Дополнительно: Полный и инкрементный",
  ],

  "SQL - PARTITION": [
    "Описание: Разделение таблиц",
    "Пример: `PARTITION BY RANGE(date)`",
    "Вопрос: Преимущества? Ответ: Улучшение производительности, упрощение обслуживания, параллельная обработка",
    "Дополнительно: Для больших таблиц",
  ],

  "SQL - MATERIALIZED VIEW": [
    "Описание: Материализованное представление",
    "Пример: `CREATE MATERIALIZED VIEW mv AS SELECT`",
    "Вопрос: Отличие от VIEW? Ответ: Хранит данные физически, требует обновления, быстрее обычного VIEW",
    "Дополнительно: Кэширование результатов",
  ],

  "SQL - VACUUM": [
    "Описание: Очистка базы",
    "Пример: `VACUUM table`",
    "Вопрос: Когда нужен? Ответ: Для очистки мертвых записей, обновления статистики, освобождения места",
    "Дополнительно: Для PostgreSQL",
  ],

  "SQL - EXPLAIN": [
    "Описание: План выполнения",
    "Пример: `EXPLAIN SELECT * FROM table`",
    "Вопрос: Как оптимизировать? Ответ: Анализировать план выполнения, добавлять индексы, оптимизировать условия WHERE",
    "Дополнительно: Анализ производительности",
  ],
};
