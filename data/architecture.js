// architecture.js

window.Architecture = {
  "Архитектура - Client-Server Architecture": [
    "Описание: Модель, где сервер обрабатывает запросы клиентов и предоставляет им данные и сервисы.",
    "Особенности:",
    "- Клиенты отправляют запросы серверу",
    "- Сервер обрабатывает запросы и управляет данными",
    "- Четкое разделение ролей упрощает масштабирование",
    "Примеры: Сайты, почта, базы данных",
    "Преимущества:",
    "- Централизованное управление",
    "- Простое масштабирование",
    "- Высокая безопасность",
    "- Легкость разработки",
    "Недостатки:",
    "- Отказ сервера останавливает всю систему",
    "- Сложно менять архитектуру",
    "- Зависимость от сервера",
    "Применение: Корпоративные приложения, онлайн-сервисы",
    "Протоколы: HTTP/HTTPS, FTP, SMTP",
    "Безопасность:",
    "- Аутентификация пользователей",
    "- Шифрование данных",
    "- Защита от атак",
  ],
  "Архитектура - Microservice Architecture": [
    "Описание: Приложение разделено на независимые сервисы с отдельными функциями",
    "Особенности:",
    "- Независимая разработка и развертывание сервисов",
    "- Общение через API",
    "- Модульность",
    "- Гибкий выбор технологий",
    "Примеры: Netflix, Amazon, Uber",
    "Преимущества:",
    "- Гибкость и масштабируемость",
    "- Простота поддержки",
    "- Устойчивость к сбоям",
    "- Быстрые обновления",
    "- Простая интеграция",
    "Недостатки:",
    "- Сложная инфраструктура",
    "- Проблемы с коммуникацией сервисов",
    "- Сложность тестирования",
    "- Высокие накладные расходы",
    "Применение: Крупные распределенные системы, облачные сервисы, e-commerce",
    "Коммуникация: REST, gRPC, очереди сообщений",
    "Управление:",
    "- API Gateway",
    "- Service Discovery",
    "- Docker и Kubernetes",
    "- Мониторинг",
    "Безопасность:",
    "- Аутентификация сервисов",
    "- Шифрование",
    "- Secrets Management",
    "- API Security",
  ],
  "Архитектура - Сравнение Client-Server и Microservice Architecture": [
    "Масштабирование:",
    "- Client-Server: Вертикальное (мощность сервера)",
    "- Microservice: Горизонтальное (количество сервисов)",
    "Разделение задач:",
    "- Client-Server: Клиент отображает, сервер обрабатывает",
    "- Microservice: Каждый сервис отвечает за свою функцию",
    "Разработка:",
    "- Client-Server: Монолитная",
    "- Microservice: Распределенная",
    "Технологии:",
    "- Client-Server: Единый стек",
    "- Microservice: Разные технологии",
    "Управление:",
    "- Client-Server: Простое",
    "- Microservice: Сложная оркестрация",
    "Надежность:",
    "- Client-Server: Зависит от сервера",
    "- Microservice: Отказоустойчивость",
    "Команды:",
    "- Client-Server: Одна команда",
    "- Microservice: Несколько команд",
    "Тестирование:",
    "- Client-Server: Целиком",
    "- Microservice: По модулям",
  ],
  "Архитектура - Основные паттерны микросервисов": [
    "API Gateway: Единая точка входа для клиентов",
    "Service Discovery: Автоматический поиск сервисов",
    "Circuit Breaker: Предотвращение каскадных сбоев",
    "Event Sourcing: Хранение изменений как событий",
    "CQRS: Разделение чтения и записи",
    "Database per Service: Отдельные БД для сервисов",
    "Strangler: Постепенная миграция с монолита",
  ],
  "Архитектура - Инструменты и технологии для микросервисов": [
    "Контейнеры: Docker, Podman",
    "Оркестрация: Kubernetes, Docker Swarm",
    "API: Kong, NGINX",
    "Service Discovery: Consul, Eureka",
    "Коммуникация: REST, GraphQL, Kafka",
    "Мониторинг: Prometheus, Grafana",
    "CI/CD: Jenkins, GitLab",
    "Безопасность: OAuth2, JWT",
    "Конфигурация: Spring Config, Vault",
  ],
  "Архитектура - Лучшие практики для микросервисов": [
    "Декомпозиция: Разделение на независимые сервисы",
    "Автоматизация: CI/CD",
    "Мониторинг: Централизованный",
    "Зависимости: Минимальные",
    "Безопасность: На всех уровнях",
    "Документация: Актуальная",
    "Конфигурация: Централизованная",
    "Тестирование: Комплексное",
    "Устойчивость: Circuit Breaker, Retry",
    "Транзакции: Saga паттерн",
  ],
  "Архитектура - Безопасность в клиент-серверной и микросервисной архитектурах": [
    "Аутентификация: Контроль доступа",
    "Шифрование: SSL/TLS",
    "Защита: От основных атак",
    "Секреты: В защищенных хранилищах",
    "Межсервисная безопасность: На уровне сервисов",
    "Мониторинг: Обнаружение угроз",
  ],
  "Архитектура - Стратегии развертывания": [
    "Blue-Green: Две идентичные среды с переключением",
    "Canary: Постепенный релиз для части пользователей",
    "Rolling: Поэтапное обновление серверов",
    "A/B Testing: Тестирование разных версий",
    "Immutable: Неизменяемые развертывания",
    "Feature Flags: Управление функциями без деплоя",
  ],
  "Архитектура - Вопросы и Ответы по архитектурам": [
    "Вопрос: Основные различия архитектур?",
    "Ответ: Client-Server монолитный, Microservice распределенный с независимыми сервисами",

    "Вопрос: Преимущества микросервисов?",
    "Ответ: Гибкость, масштабируемость, устойчивость к сбоям, быстрое внедрение изменений",

    "Вопрос: Сложности перехода на микросервисы?",
    "Ответ: Управление сервисами, коммуникация, инфраструктура, сложность тестирования",

    "Вопрос: Когда использовать Client-Server?",
    "Ответ: Для небольших приложений с четкими требованиями и централизованным управлением",

    "Вопрос: Как обеспечивается надежность микросервисов?",
    "Ответ: Через изоляцию сервисов и механизмы восстановления",

    "Вопрос: Основные инструменты для микросервисов?",
    "Ответ: Kubernetes, Docker, API Gateway, мониторинг",

    "Вопрос: Влияние на процесс разработки?",
    "Ответ: Параллельная разработка, DevOps практики, координация команд",
  ],
  "Архитектура - Дополнительные вопросы и ответы": [
    "Вопрос: Согласованность данных?",
    "Ответ: Через распределенные транзакции, Saga паттерн, репликацию",

    "Вопрос: Роль API Gateway?",
    "Ответ: Единая точка входа, маршрутизация, безопасность",

    "Вопрос: Методы коммуникации?",
    "Ответ: REST, gRPC, очереди сообщений",

    "Вопрос: Реализация мониторинга?",
    "Ответ: Централизованные системы мониторинга и логирования",

    "Вопрос: Service Mesh?",
    "Ответ: Слой управления межсервисной коммуникацией",

    "Вопрос: Управление конфигурацией?",
    "Ответ: Централизованные системы управления конфигурацией и секретами",

    "Вопрос: Полезные паттерны?",
    "Ответ: API Gateway, Service Discovery, Circuit Breaker, CQRS",

    "Вопрос: Безопасность взаимодействий?",
    "Ответ: Аутентификация, авторизация, шифрование, мониторинг",
  ],
};
