// questsandanswers.js
window.QuestsAndAnswers = {
  "QA - Docker": {
    "Что такое Docker?":
      "Платформа для упаковки приложений в контейнеры, которые запускаются на любой системе с Docker",
    "Основные команды Docker":
      "`docker run`, `build`, `pull`, `push`, `images`, `ps`",
    "Контейнер vs Виртуальная машина":
      "Контейнеры используют ядро ОС хоста и занимают меньше ресурсов. VM имеет свое ядро",
    "Docker Compose":
      "Инструмент для управления многоконтейнерными приложениями через YAML",
    "Сети в Docker":
      "bridge, host, overlay для изоляции и соединения контейнеров",
    "Docker Volume":
      "Хранилище данных вне контейнера для сохранения информации",
  },
  "QA - Git": {
    "Что такое Git?":
      "Система контроля версий для отслеживания изменений в коде",
    "Основные команды Git":
      "`init`, `clone`, `add`, `commit`, `push`, `pull`, `branch`, `merge`",
    "merge vs rebase":
      "merge сохраняет историю веток, rebase делает линейную историю",
    "Восстановление коммита": "`git reflog` + `git checkout <hash>`",
    "Stash в Git": "Временное сохранение изменений для переключения веток",
    "Механизм веток": "Независимые линии разработки для изоляции изменений",
  },
  "QA - Kubernetes": {
    "Что такое Kubernetes?":
      "Платформа для оркестрации контейнеров и управления приложениями",
    "Основные команды kubectl":
      "`get pods`, `describe pod`, `apply -f`, `delete pod`",
    Pod: "Базовый объект с одним или несколькими контейнерами",
    "Deployment vs ReplicaSet":
      "Deployment управляет обновлениями, ReplicaSet - количеством реплик",
    Namespace: "Изоляция ресурсов в кластере",
    Масштабирование: "`kubectl scale` или Horizontal Pod Autoscaler",
  },
  "QA - Networking": {
    "TCP vs UDP": "TCP надежный с подтверждением, UDP быстрый без гарантий",
    DNS: "Преобразует домены в IP-адреса",
    NAT: "Преобразует частные IP в публичные для доступа в интернет",
    "Модель OSI": "7 уровней передачи данных между устройствами",
    VLAN: "Логическое разделение физической сети",
    HTTPS: "Шифрованное HTTP соединение через SSL/TLS",
    DHCP: "Автоматическое назначение IP-адресов устройствам",
    VPN: "Защищенное соединение через публичную сеть",
    CIDR: "Гибкое распределение IP-адресов и маски подсети",
    MTU: "Максимальный размер пакета для передачи",
    Порт: "Идентификатор для направления трафика приложениям",
    NAT: "Преобразование внутренних IP во внешние",
    "Безопасность TCP/IP":
      "Файрволы, шифрование, аутентификация и контроль доступа",
    traceroute: "Показывает маршрут пакетов до цели",
    ping: "Проверка доступности узла и задержки",
  },
  "QA - SQL": {
    "Выборка данных": "`SELECT * FROM table_name`",
    "WHERE vs HAVING": "WHERE до группировки, HAVING после",
    JOIN: "Объединение таблиц по ключу",
    Индексы: "Ускоряют поиск данных",
    Подзапросы: "Запросы внутри запроса",
    Пагинация: "`LIMIT` и `OFFSET`",
    Транзакции: "Атомарные операции с ACID свойствами",
    "Создание таблиц с ключами": "`CREATE TABLE` с PRIMARY/FOREIGN KEY",
    UNIQUE: "`CREATE TABLE users (email UNIQUE)`",
    "NOT NULL": "`name VARCHAR NOT NULL`",
    DEFAULT: "`created_at TIMESTAMP DEFAULT NOW()`",
    CASE: "`CASE WHEN age>=18 THEN 'Adult' ELSE 'Minor'`",
    "Оконные функции": "Для вычислений без группировки",
    Подзапросы: "Коррелированные и некоррелированные",
    EXISTS: "Проверка существования записей",
    "DISTINCT ON": "Уникальные записи по столбцам",
  },
  "QA - Postman": {
    "Что такое Postman?": "Инструмент тестирования API",
    Коллекции: "Группировка связанных запросов",
    Переменные: "Глобальные, окружения, локальные",
    "pre-request script": "Скрипт перед запросом",
    Автоматизация: "Тесты и Collection Runner",
    Newman: "CLI для запуска коллекций",
    "Использование переменных": "{{variable_name}}",
    "Глобальные переменные": "Доступны во всех запросах",
    Окружения: "Изолированные наборы переменных",
    Документирование: "Описания запросов и автогенерация",
    Тесты: "Проверка ответов API",
    Мониторинг: "Отслеживание доступности",
    "Импорт/экспорт": "JSON формат коллекций",
  },
  "QA - Agile": {
    Scrum: "Фреймворк с итерациями и ролями",
    Kanban: "Визуализация и ограничение WIP",
    "Scrum vs Kanban": "Фиксированные итерации vs непрерывный поток",
    "Преимущества Scrum": "Структура, прозрачность, коммуникация",
    "Преимущества Kanban": "Гибкость и оптимизация потока",
    "Kanban-доска": "To Do, In Progress, Done с лимитами",
    Ретроспектива: "Анализ спринта и улучшения",
    "Роли Scrum": "Scrum Master, Product Owner, Team",
    "Sprint Planning": "Планирование задач спринта",
    "Product Backlog": "Список требований к продукту",
  },
  "QA - Relational vs Non-relational": {
    "Реляционные БД": "Таблицы со схемой и SQL",
    "Нереляционные БД": "Гибкая структура для больших данных",
    "Основные различия": "Схема и масштабирование",
    "Плюсы реляционных": "Целостность, транзакции, запросы",
    "Плюсы нереляционных": "Гибкость и масштабируемость",
    "Применение реляционных": "Финансы, ERP",
    "Применение нереляционных": "Веб, Big Data",
    "Примеры реляционных": "MySQL, PostgreSQL",
    "Примеры нереляционных": "MongoDB, Redis",
  },
  "QA - Encryption": {
    "Асимметричное шифрование": "Пара ключей: открытый и закрытый",
    Преимущества: "Безопасность и гибкость",
    Недостатки: "Медленнее симметричного",
    Применение: "SSL/TLS, PGP",
    Алгоритмы: "RSA, ECC",
  },
  "QA - Method Calls": {
    "Синхронные вызовы": "Блокирующие вызовы с ожиданием",
    "Асинхронные вызовы": "Неблокирующие, параллельные",
    Различия: "Блокировка и параллельность",
    "Плюсы синхронных": "Простота и последовательность",
    "Минусы синхронных": "Блокировка и задержки",
    "Плюсы асинхронных": "Производительность и отзывчивость",
    "Минусы асинхронных": "Сложность и отладка",
    "Применение синхронных": "Зависимые запросы к БД",
    "Применение асинхронных": "Фоновые задачи и веб-сокеты",
  },
  "QA - HTTP": {
    GET: "Получение данных через URL",
    POST: "Отправка данных в теле",
    "GET vs POST": "Кеширование и безопасность",
    "Плюсы GET": "Кеш и закладки",
    "Минусы GET": "Длина URL и безопасность",
    "Плюсы POST": "Объем данных и конфиденциальность",
    "Минусы POST": "Нет кеша и закладок",
  },
  "QA - WebSockets": {
    WebSocket: "Двусторонняя связь в реальном времени",
    Применение: "Чаты, игры, биржи",
    Преимущества: "Эффективность и низкие задержки",
    Недостатки: "Сложность и поддержка",
    Соединение: "`new WebSocket(url)`",
    Сообщения: "`send()` и `onmessage`",
    Пример: "Базовый чат на WebSocket",
  },
  "QA - CAP": {
    "CAP теорема": "Consistency, Availability, Partition tolerance",
    Согласованность: "Одинаковые данные на всех узлах",
    Доступность: "Ответ на каждый запрос",
    Устойчивость: "Работа при разрывах связи",
    Компромисс: "CA, CP или AP",
    "Типы систем": "Банки (CP), соцсети (AP)",
    Влияние: "Выбор приоритетов системы",
  },
  "QA - Load Balancing": {
    Балансировка: "Распределение нагрузки между серверами",
    Виды: "Round Robin, Least Connections, IP Hash",
    "Round Robin": "Поочередное распределение",
    "Least Connections": "По минимуму соединений",
    "IP Hash": "Маршрутизация по IP клиента",
    Преимущества: "Отказоустойчивость и производительность",
    Мониторинг: "Health checks и масштабирование",
    Инструменты: "NGINX, HAProxy, облачные решения",
  },
  "QA - Масштабирование": {
    Вертикальное: "Увеличение мощности сервера",
    Горизонтальное: "Добавление серверов",
    "Когда вертикальное": "Небольшие системы",
    "Когда горизонтальное": "Большие распределенные системы",
    "Плюсы вертикального": "Простота внедрения",
    "Минусы вертикального": "Ограничения железа",
    "Плюсы горизонтального": "Неограниченное масштабирование",
    "Минусы горизонтального": "Сложность управления",
  },
  "QA - Sessions": {
    "Управление сессиями": "ID сессии, хранение, безопасность",
    Хранение: "Сервер, клиент, токены",
    Безопасность: "HTTPS, XSS/CSRF защита",
    Технологии: "Express session, JWT",
    JWT: "Токены без хранения на сервере",
    "HTTP-only/Secure": "Защита куки",
  },
  "QA - Integration": {
    "Системная интеграция": "Стандарты, протоколы, API",
    Методы: "Point-to-Point, ESB, Middleware",
    Проблемы: "Совместимость и безопасность",
    Практики: "Стандартизация и документация",
    ESB: "Гибкая интеграция сервисов",
  },
  "QA - ESB": {
    ESB: "Шина для интеграции сервисов",
    Преимущества: "Гибкость и централизация",
    Недостатки: "Сложность и накладные расходы",
    Решения: "MuleSoft, IBM, Apache Camel",
    Примеры: "Интеграция CRM/ERP систем",
  },
  "QA - Auth": {
    Аутентификация: "Проверка личности",
    Авторизация: "Проверка прав",
    Различия: "Кто vs что может делать",
    Примеры: "Логин vs доступ к ресурсам",
    "Методы аутентификации": "Пароли, MFA, биометрия",
    "Методы авторизации": "RBAC, ABAC, ACL",
    Практики: "Сильные пароли и аудит",
  },
  "QA - Databases": {
    "Реляционные БД": "Таблицы с ключами",
    Преимущества: "ACID и запросы",
    Целостность: "Ключи и constraints",
    Примеры: "MySQL, PostgreSQL",
    Транзакции: "ACID операции",
    Нормализация: "Оптимизация структуры",
    Формы: "1NF, 2NF, 3NF, BCNF",
  },
  "QA - NoSQL": {
    NoSQL: "Гибкие базы данных",
    Преимущества: "Масштабируемость",
    Типы: "Документные, графовые, key-value",
    Масштабирование: "Шардинг и репликация",
    Примеры: "MongoDB, Redis",
    Применение: "Веб и Big Data",
    Репликация: "Копии для доступности",
    Запросы: "Зависят от типа БД",
  },
  "QA - Architecture": {
    Архитектура: "Структура системы",
    Принципы: "Модульность и масштабируемость",
    Микросервисы: "Независимые сервисы",
    "Плюсы микросервисов": "Гибкость и масштабирование",
    "Минусы микросервисов": "Сложность управления",
    Монолит: "Единый блок кода",
    "Плюсы монолита": "Простота разработки",
    "Минусы монолита": "Сложность масштабирования",
    Распределенная: "Множество узлов",
    Компоненты: "Сервера, БД, балансировщики",
    REST: "API на HTTP методах",
    "SOAP vs REST": "XML vs легковесность",
    "API Gateway": "Единая точка входа",
    Паттерны: "Микросервисы, SOA, serverless",
    Масштабируемость: "Вертикальная и горизонтальная",
  },
};
