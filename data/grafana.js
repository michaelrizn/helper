// grafana.js

window.Grafana = {
  "Grafana - Источники данных": [
    "Описание: Системы, предоставляющие данные для визуализации",
    "Основные источники:",
    "- Prometheus: система мониторинга",
    "- InfluxDB: временные ряды",
    "- Elasticsearch: поиск и аналитика",
    "- MySQL/PostgreSQL: реляционные БД",
    "- Graphite: метрики",
    "- Loki: логи",
    "- CloudWatch: мониторинг AWS",
    "Добавление источника:",
    "1. Configuration > Data Sources",
    "2. Add data source",
    "3. Выбрать тип",
    "4. Настроить параметры",
    "5. Save & Test"
  ],
  "Grafana - Prometheus": [
    "Описание: Система мониторинга для сбора и анализа метрик",
    "Особенности:",
    "- HTTP сбор метрик",
    "- Собственное хранилище",
    "- PromQL запросы",
    "- Alertmanager",
    "- Автономность",
    "Применение: Мониторинг серверов и приложений",
    "Плюсы:",
    "- Производительность",
    "- Гибкий PromQL",
    "- Интеграция с Grafana",
    "- Масштабируемость",
    "Минусы:",
    "- Хранение данных",
    "- Настройка экспортеров",
    "- Сложность для новичков",
    "Установка:",
    "1. Скачать с prometheus.io",
    "2. Настроить prometheus.yml",
    "3. Запустить сервер",
    "4. Добавить экспортеры",
    "5. Подключить к Grafana"
  ],
  "Grafana - Примеры запросов Prometheus": [
    "1. Текущее значение:\n```promql\nmetric_name\n```",
    "2. Сумма за период:\n```promql\nsum(rate(metric[5m]))\n```",
    "3. Среднее по экземплярам:\n```promql\navg(rate(metric[1m]))\n```",
    "4. Количество ошибок:\n```promql\nsum(rate(errors[5m]))\n```",
    "5. Максимум в группе:\n```promql\nmax(rate(metric[5m])) by (instance)\n```",
    "6. Активные соединения:\n```promql\ncount(up) by (job)\n```",
    "7. Сравнение метрик:\n```promql\nrate(requests[5m]) / rate(errors[5m])\n```",
    "8. Фильтр по сервису:\n```promql\nmetric{job=\"service\"}\n```",
    "9. Группировка:\n```promql\nsum(rate(requests[5m])) by (code)\n```",
    "10. Агрегация:\n```promql\nrate(latency_sum[5m]) / rate(latency_count[5m])\n```"
  ],
  "Grafana - Loki": [
    "Описание: Система для работы с логами",
    "Особенности:",
    "- Сжатие логов",
    "- Совместимость с Prometheus",
    "- Метки для поиска",
    "- Масштабируемость",
    "- Grafana интеграция",
    "Применение: Логирование, анализ ошибок",
    "Плюсы:",
    "- Эффективное хранение",
    "- Простая интеграция",
    "- Быстрый поиск",
    "- Удобное управление",
    "Минусы:",
    "- Ограниченная аналитика",
    "- Настройка меток",
    "- Поддержка источников",
    "Установка:",
    "1. Скачать Loki",
    "2. Настроить конфиг",
    "3. Запустить сервер",
    "4. Настроить Promtail",
    "5. Подключить к Grafana"
  ],
  "Grafana - Примеры запросов Loki": [
    "1. Все логи:\n```logql\n{job=\"logs\"}\n```",
    "2. Фильтр по уровню:\n```logql\n{job=\"logs\", level=\"error\"}\n```",
    "3. Поиск сообщения:\n```logql\n{job=\"logs\"} |= \"error\"\n```",
    "4. Регулярные выражения:\n```logql\n{job=\"logs\"} |~ \"error|warn\"\n```",
    "5. Подсчет логов:\n```logql\ncount_over_time({job=\"logs\"}[5m])\n```",
    "6. Агрегация по времени:\n```logql\nsum by (level) (count_over_time({job=\"logs\"}[5m]))\n```",
    "7. Среднее время:\n```logql\navg_over_time(rate({job=\"logs\"}[1m]))\n```",
    "8. Группировка:\n```logql\n{job=\"logs\"} |= \"timeout\" | sum by (service)\n```",
    "9. Фильтрация и агрегация:\n```logql\n{job=\"logs\"} |= \"error\" | count_over_time(1m)\n```",
    "10. Комбинирование:\n```logql\n{job=\"logs\", service=\"app\"} |= \"failed\" |~ \"user=.*\"\n```"
  ],
  "Основные функции PromQL для работы с метриками": [
    "rate() — средняя скорость прироста счетчика за указанный интервал времени, используется для расчета RPS, ошибок и т.п.",
    "irate() — мгновенная скорость изменения счетчика, вычисляется по двум последним точкам, полезна для отображения текущих пиковых значений.",
    "increase() — общее увеличение счетчика за период, показывает, насколько выросла метрика за интервал (например, количество запросов).",
    "sum() — суммирование значений по всем временным рядам, часто используется для агрегации по всем инстансам или сервисам.",
    "avg() — среднее значение по временным рядам, полезно для оценки средней загрузки, времени отклика и т.д.",
    "max() — максимальное значение среди временных рядов, позволяет определить пиковые нагрузки или задержки.",
    "min() — минимальное значение среди временных рядов, показывает минимальные показатели в группе.",
    "count() — количество временных рядов, участвующих в запросе, например, число активных инстансов.",
    "delta() — разница между начальным и конечным значением метрики за интервал, подходит для gauge-метрик.",
    "deriv() — производная по времени, оценивает скорость изменения gauge-метрик (например, температура, использование памяти).",
    "histogram_quantile() — вычисление квантиля (например, 95-й процентиль) на основе гистограммных метрик, для оценки задержек и времени отклика."
  ],
  "Примеры PromQL": [
    "Текущее значение метрики:\n```promql\nmetric_name\n```",
    "Сумма по всем инстансам:\n```promql\nsum(metric_name)\n```",
    "Среднее по группе:\n```promql\navg by (job) (metric_name)\n```",
    "Количество активных инстансов:\n```promql\ncount(up == 1)\n```",
    "Количество ошибок за 5 минут:\n```promql\nsum(rate(errors_total[5m]))\n```",
    "Максимальное значение по группе:\n```promql\nmax by (instance) (metric_name)\n```",
    "Использование фильтров по лейблам:\n```promql\nmetric_name{job=\"api\", env=\"prod\"}\n```",
    "Сравнение двух метрик:\n```promql\nrate(requests_total[5m]) / rate(errors_total[5m])\n```",
    "Агрегация с группировкой:\n```promql\nsum(rate(http_requests_total[1m])) by (status)\n```",
    "Квантиль по гистограмме:\n```promql\nhistogram_quantile(0.95, sum(rate(request_duration_seconds_bucket[5m])) by (le))\n```"
  ],
  "Основные функции LogQL для работы с логами": [
    "`{job=\"app\"}` — выбор логов по меткам (лейблам)",
    "`|= \"error\"` — фильтр по наличию текста (точное совпадение)",
    "`!= \"debug\"` — исключение строк, содержащих текст",
    "`|~ \"timeout|fail\"` — фильтр по регулярному выражению (совпадение)",
    "`!~ \"ignore|skip\"` — исключение по регулярному выражению",
    "`count_over_time()` — количество логов за интервал времени",
    "`rate()` — скорость появления логов (логи в секунду)",
    "`sum()` — суммирование значений (например, байт)",
    "`avg()` — среднее значение",
    "`bytes_over_time()` — объем логов за интервал",
    "`max_over_time()` — максимальное значение",
    "`min_over_time()` — минимальное значение",
    "`by()` — группировка по меткам, например `sum by (level)`",
    "Пайплайны можно комбинировать: фильтры, регулярки, агрегации",
    "Пример: `{job=\"api\"} |= \"error\" |~ \"timeout\" | count_over_time(5m)` — количество ошибок timeout за 5 минут"
  ],
  "Примеры LogQL": [
    "1. Все логи:\n```logql\n{job=\"app\"}\n```",
    "2. Фильтр по тексту:\n```logql\n{job=\"app\"} |= \"error\"\n```",
    "3. Исключение по тексту:\n```logql\n{job=\"app\"} != \"debug\"\n```",
    "4. Фильтр по регулярному выражению:\n```logql\n{job=\"app\"} |~ \"timeout|fail\"\n```",
    "5. Исключение по регулярному выражению:\n```logql\n{job=\"app\"} !~ \"ignore|skip\"\n```",
    "6. Подсчет логов за 5 минут:\n```logql\ncount_over_time({job=\"app\"}[5m])\n```",
    "7. Скорость появления логов:\n```logql\nrate({job=\"app\"}[1m])\n```",
    "8. Группировка по уровню:\n```logql\nsum by (level) (count_over_time({job=\"app\"}[5m]))\n```",
    "9. Подсчет ошибок:\n```logql\nsum(count_over_time({job=\"app\"} |= \"error\"[5m]))\n```",
    "10. Комбинированный фильтр:\n```logql\n{job=\"app\"} |= \"error\" |~ \"timeout\" | count_over_time(5m)\n```"
  ]
};
