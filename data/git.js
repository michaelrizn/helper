// git.js
window.Git = {
  "Git - Настройка": {
    "git config --global user.name '[name]'":
      "Установить имя пользователя для коммитов",
    "git config --global user.email '[email]'":
      "Установить email пользователя для коммитов",
    "git config --global alias.[alias] [command]":
      "Создать псевдоним для команды Git",
    "git config --global core.editor [editor]":
      "Установить текстовый редактор по умолчанию для сообщений коммитов",
    "git config --global --edit":
      "Открыть конфигурацию Git для ручного редактирования",
    "git config --global color.ui auto": "Включить цветовую подсветку в Git",
    "git config --global merge.tool [tool]":
      "Установить инструмент для слияния веток",
    "git config --global diff.tool [tool]":
      "Установить инструмент для сравнения изменений",
    "git config --global pull.rebase true":
      "Установить режим rebase при выполнении git pull",
    "git config --global push.default simple":
      "Установить поведение push по умолчанию",
  },
  "Git - Инициализация и клонирование": {
    "git init": "Инициализировать репозиторий Git в текущей директории",
    "git clone [url]":
      "Клонировать удалённый репозиторий в локальную директорию",
    "git clone [url] [directory]":
      "Клонировать удалённый репозиторий в указанную директорию",
    "git clone --depth 1 [url]":
      "Клонировать репозиторий с ограниченной историей (одношаговый клонирование)",
    "git remote -v": "Показать список удалённых репозиториев",
    "git remote add origin [url]":
      "Добавить удалённый репозиторий с именем origin",
    "git remote set-url origin [new_url]":
      "Изменить URL удалённого репозитория origin",
  },
  "Git - Работа с ветками": {
    "git branch": "Показать список локальных веток",
    "git branch [branch-name]": "Создать новую ветку",
    "git branch -d [branch-name]": "Удалить указанную ветку",
    "git checkout [branch-name]": "Переключиться на указанную ветку",
    "git checkout -b [branch-name]": "Создать и переключиться на новую ветку",
    "git switch [branch-name]":
      "Переключиться на указанную ветку (современный метод)",
    "git switch -c [branch-name]":
      "Создать и переключиться на новую ветку (современный метод)",
    "git merge [branch-name]": "Слить указанную ветку с текущей",
    "git branch -m [old-name] [new-name]": "Переименовать ветку",
    "git branch -a": "Показать все локальные и удалённые ветки",
    "git fetch origin": "Обновить информацию о ветках с удалённого репозитория",
  },
  "Git - Работа с изменениями": {
    "git status": "Показать статус текущего репозитория",
    "git add [file]": "Добавить файл в область подготовленных изменений",
    "git add .": "Добавить все файлы в область подготовленных изменений",
    "git reset [file]": "Убрать файл из области подготовленных изменений",
    "git reset --hard": "Сбросить все изменения к последнему коммиту",
    "git diff": "Показать несохранённые изменения в файлах",
    "git diff --staged": "Показать подготовленные изменения",
    "git commit -m '[message]'": "Создать коммит с сообщением",
    "git commit --amend": "Изменить последний коммит",
    "git stash": "Сохранить текущие изменения в стек временных изменений",
    "git stash pop": "Применить последние сохранённые изменения из стека",
    "git stash list": "Показать список сохранённых изменений в стеке",
  },
  "Git - Работа с удалёнными репозиториями": {
    "git remote add [name] [url]": "Добавить новый удалённый репозиторий",
    "git fetch [name]": "Загрузить изменения с удалённого репозитория",
    "git pull [name] [branch]":
      "Загрузить изменения и объединить с текущей веткой",
    "git push [name] [branch]":
      "Отправить изменения текущей ветки на удалённый репозиторий",
    "git push --set-upstream [name] [branch]":
      "Установить upstream для текущей ветки",
    "git remote remove [name]": "Удалить удалённый репозиторий",
    "git remote rename [old-name] [new-name]":
      "Переименовать удалённый репозиторий",
    "git push origin --delete [branch]":
      "Удалить ветку на удалённом репозитории",
  },
  "Git - Просмотр истории": {
    "git log": "Показать историю коммитов",
    "git log --oneline": "Показать историю коммитов в однострочном формате",
    "git log --graph --oneline":
      "Показать историю в виде графа с краткими сообщениями",
    "git blame [file]": "Показать, кто и когда внёс изменения в файл",
    "git show [commit]": "Показать детали указанного коммита",
    "git shortlog": "Показать сводку коммитов по авторам",
    "git reflog": "Показать историю ссылок на коммиты",
    "git log --since='2 weeks ago'": "Показать коммиты за последние 2 недели",
    "git log --author='Author Name'":
      "Показать коммиты, сделанные указанным автором",
  },
  "Git - Работа с тегами": {
    "git tag": "Показать список тегов",
    "git tag [tag-name]": "Создать новый тег",
    "git tag -d [tag-name]": "Удалить указанный тег",
    "git push [name] [tag-name]": "Отправить тег в удалённый репозиторий",
    "git push origin --tags": "Отправить все теги в удалённый репозиторий",
    "git show [tag-name]": "Показать информацию о теге",
    "git tag -a [tag-name] -m '[message]'":
      "Создать аннотированный тег с сообщением",
    "git tag -s [tag-name] -m '[message]'":
      "Создать подписанный тег с сообщением",
  },
  "Git - Примеры": {
    "Создание нового репозитория и первый коммит":
      "Команды:\n`git init`\n`git add .`\n`git commit -m 'Initial commit'`",
    "Клонирование репозитория и работа в новой директории":
      "Команды:\n`git clone https://github.com/user/repo.git`\n`cd repo`",
    "Создание и слияние веток":
      "Команды:\n`git checkout -b feature-branch`\n[внесение изменений]\n`git commit -m 'Add feature'\n`git checkout main`\n`git merge feature-branch`",
    "Отправка изменений на удалённый репозиторий":
      "Команды:\n`git add .`\n`git commit -m 'Update README'\n`git push origin main`",
    "Восстановление удалённого коммита":
      "Команды:\n`git reflog`\n`git checkout <commit-hash>`\n`git checkout -b new-branch`",
    "Использование stash для временного сохранения изменений":
      "Команды:\n`git stash`\n[переключение веток]\n`git stash pop`",
    "Создание аннотированного тега и отправка его":
      "Команды:\n`git tag -a v1.0 -m 'Release version 1.0'`\n`git push origin v1.0`",
    "Отмена последнего коммита и изменения":
      "Команды:\n`git reset --soft HEAD~1`\n`git reset --hard HEAD~1`",
    "Просмотр изменений между ветками":
      "Команда: `git diff main feature-branch`",
    "Настройка псевдонимов для упрощения команд":
      "Команды:\n`git config --global alias.co checkout`\n`git config --global alias.br branch`\nТеперь можно использовать `git co` вместо `git checkout`",
  },
  "Git - Вопросы и Ответы для Собеседований": {
    "Что такое Git и для чего он используется?":
      "Git — распределённая система контроля версий, используемая для отслеживания изменений в исходном коде и координации работы нескольких разработчиков над проектами.",
    "Чем Git отличается от других систем контроля версий?":
      "Git является распределённой системой, что означает, что каждая копия репозитория содержит полную историю изменений. Это обеспечивает высокую скорость операций и позволяет работать офлайн, в отличие от централизованных систем контроля версий.",
    "Что такое ветка (branch) в Git и зачем она нужна?":
      "Ветка — это независимая линия разработки в Git. Она позволяет работать над новыми функциями или исправлениями багов без воздействия на основную ветку (обычно main или master). Это способствует параллельной разработке и улучшает организацию кода.",
    "Что такое слияние (merge) и ребейз (rebase) в Git?":
      "Слияние (merge) объединяет изменения из одной ветки в другую, сохраняя историю коммитов. Ребейз (rebase) переназначает базу текущей ветки на другой коммит, делая историю более линейной. Оба метода имеют свои преимущества и используются в разных ситуациях.",
    "Как разрешить конфликты при слиянии веток?":
      "При возникновении конфликтов Git пометит файлы с конфликтами. Разработчик должен вручную внести изменения в эти файлы, сохранить их и завершить процесс слияния с помощью `git add` и `git commit`.",
    "Что такое stash в Git и как его использовать?":
      "`git stash` позволяет временно сохранить текущие незакоммиченные изменения, чтобы переключиться на другую ветку. Позже можно вернуть эти изменения с помощью `git stash pop` или `git stash apply`.",
    "Как восстановить удалённый коммит в Git?":
      "Используйте `git reflog` для поиска хеша коммита, затем переключитесь на него с помощью `git checkout <commit-hash>` и создайте новую ветку или выполните другие действия по необходимости.",
    "Что такое Git Hooks и как они используются?":
      "Git Hooks — это скрипты, которые автоматически выполняются при определённых событиях в Git, например, до коммита или после слияния. Они используются для автоматизации задач, таких как проверка кода, запуск тестов или форматирование.",
    "Как управлять большими файлами в Git?":
      "Используйте Git Large File Storage (LFS) для отслеживания и управления большими файлами, что позволяет хранить их вне основного репозитория и улучшает производительность.",
    "Что такое fork и pull request в GitHub?":
      "Fork — это копия репозитория, созданная для внесения изменений без воздействия на оригинальный проект. Pull request — это запрос на слияние изменений из fork'а обратно в оригинальный репозиторий, что позволяет обсудить и проверить изменения перед их интеграцией.",
    "Как оптимизировать работу с репозиториями Git?":
      "Используйте правильные стратегии ветвления, регулярно очищайте неиспользуемые ветки и теги, применяйте .gitignore для исключения ненужных файлов, а также следите за размером репозитория и используйте Git LFS для больших файлов.",
    "Как восстановить файл после его удаления в Git?":
      "Используйте `git checkout -- <file>` для восстановления удалённого файла из последнего коммита или `git restore <file>` в современных версиях Git.",
    "Что такое rebasing и когда его использовать?":
      "Rebasing — это процесс переназначения базы ветки на другой коммит. Его следует использовать для поддержания линейной истории, особенно перед слиянием ветки в основную, чтобы избежать лишних коммитов слияния.",
    "Как настроить Git для работы с несколькими удалёнными репозиториями?":
      "Используйте `git remote add [name] [url]` для добавления дополнительных удалённых репозиториев и управляйте ими с помощью соответствующих команд push и pull.",
    "Что такое cherry-pick в Git и как его использовать?":
      "`git cherry-pick <commit>` позволяет применить изменения из конкретного коммита на текущую ветку, не затрагивая другие изменения.",
  },
};
