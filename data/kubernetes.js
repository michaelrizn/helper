// kubernetes.js
window.Kubernetes = {
  "Kubernetes - Основные команды": {
    "kubectl cluster-info": "Показать информацию о кластере",
    "kubectl get nodes": "Посмотреть узлы в кластере",
    "kubectl get pods": "Показать запущенные поды",
    "kubectl get pods -o wide": "Показать поды с расширенной информацией",
    "kubectl get services": "Показать сервисы в кластере",
    "kubectl describe pod <pod_name>": "Получить детальную информацию о поде",
    "kubectl logs <pod_name>": "Просмотреть логи пода",
    "kubectl exec -it <pod_name> -- /bin/bash":
      "Запустить bash в контейнере внутри пода",
    "kubectl delete pod <pod_name>": "Удалить указанный под",
    "kubectl apply -f <file.yaml>": "Применить манифест из файла YAML",
    "kubectl delete -f <file.yaml>": "Удалить ресурсы, описанные в файле YAML",
    "kubectl get all": "Показать все ресурсы в текущем namespace",
    "kubectl describe": "Посмотреть детальную информацию об объекте",
    "kubectl get <object> --selector <label>": "Фильтрация объектов по лейблу",
    "kubectl scale --replicas=<number> deployment/<deployment_name>":
      "Масштабировать количество реплик в деплойменте",
    "kubectl rollout status deployment/<deployment_name>":
      "Проверить статус развертывания деплоймента",
    "kubectl rollout undo deployment/<deployment_name>":
      "Отменить последнее развертывание деплоймента",
  },
  "Kubernetes - Namespace": {
    "kubectl get ns": "Показать все namespaces",
    "kubectl create ns <namespace_name>": "Создать namespace",
    "kubectl delete ns <namespace_name>": "Удалить namespace",
    "kubectl config set-context --current --namespace=<namespace_name>":
      "Установить текущий namespace",
    "-n или --namespace": "Указать namespace для команды kubectl",
  },
  "Kubernetes - Debugging и Monitoring": {
    "kubectl top nodes": "Показать метрики узлов (CPU/Memory)",
    "kubectl top pods": "Показать метрики подов",
    "kubectl port-forward <pod_name> <local_port>:<pod_port>":
      "Настроить перенаправление порта для пода",
    "kubectl describe node <node_name>":
      "Получить подробную информацию о конкретном узле",
    "kubectl get events": "Просмотреть события в кластере",
    "kubectl logs -f <pod_name>": "Следить за логами пода в реальном времени",
    "kubectl get deployment <deployment_name> -o yaml":
      "Получить YAML конфигурацию деплоймента",
  },
  "Kubernetes - Объекты и понятия": {
    Pod: "Один или группа контейнеров. Это основной объект, запускающий контейнеры. Без подов контейнеры не могут быть запущены.",
    Namespace: "Группировка объектов для их изоляции в рамках кластера.",
    "Control Plane":
      "Совокупность компонентов, управляющих состоянием кластера Kubernetes.",
    ReplicaSet:
      "Обеспечивает постоянное число работающих подов, восстанавливая их при необходимости.",
    Deployment:
      "Объект для декларативного развертывания и обновления приложений.",
    DaemonSet: "Запускает поды на каждой ноде или выбранных узлах кластера.",
    NodePort:
      "Сервис, открывающий порт на внешнем интерфейсе каждой ноды для доступа к подам.",
    LoadBalancer:
      "Сервис для создания внешнего балансировщика нагрузки с помощью облачного провайдера.",
    Ingress:
      "Набор правил для маршрутизации внешних подключений к сервисам внутри кластера.",
    "Kube-Proxy":
      "Компонент, отвечающий за сетевое взаимодействие между контейнерами.",
    Labels:
      "Произвольные пары ключ-значение, используемые для маркировки объектов.",
    Selectors: "Фильтры для выбора объектов по их лейблам.",
    Vault: "Хранилище секретов от HashiCorp с интеграцией в Kubernetes.",
    Service: "Абстракция, определяющая набор подов и политику доступа к ним.",
    ConfigMap:
      "Объект для хранения конфигурационных данных, которые могут быть использованы подами.",
    Secret:
      "Объект для хранения конфиденциальных данных, таких как пароли или токены.",
    StatefulSet:
      "Управляет состоянием приложений, требующих стабильных идентификаторов и хранилищ.",
    Job: "Объект для выполнения одноразовых задач.",
    CronJob: "Объект для планирования и выполнения повторяющихся задач.",
  },
  "Kubernetes - Утилиты": {
    kubeadm: "Упрощает процесс установки и управления кластером Kubernetes.",
    kubectx: "Утилита для быстрого переключения между кластерами и namespaces.",
    stern: "Инструмент для отслеживания логов нескольких подов одновременно.",
    k9s: "Интерактивный терминальный UI для управления Kubernetes кластерами.",
  },
  "Kubernetes - Примеры": {
    "Создание деплоймента с Nginx":
      "Команда: `kubectl create deployment nginx --image=nginx`",
    "Масштабирование деплоймента до 3 реплик":
      "Команда: `kubectl scale deployment/nginx --replicas=3`",
    "Создание сервиса NodePort для деплоймента":
      "Команда: `kubectl expose deployment/nginx --type=NodePort --port=80`",
    "Просмотр логов конкретного контейнера в поде":
      "Команда: `kubectl logs <pod_name> -c <container_name>`",
    "Перезапуск пода путем его удаления":
      "Команда: `kubectl delete pod <pod_name>`",
    "Применение манифеста из файла YAML":
      "Команда: `kubectl apply -f deployment.yaml`",
    "Настройка порт-форвардинга для доступа к приложению":
      "Команда: `kubectl port-forward svc/nginx 8080:80`",
    "Просмотр метрик кластера с помощью Metrics Server":
      "Команда: `kubectl top nodes` и `kubectl top pods`",
    "Создание Ingress для маршрутизации трафика":
      "Пример манифеста Ingress:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\nspec:\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nginx\n            port:\n              number: 80\n```",
    "Использование ConfigMap для передачи конфигурации в под":
      "Команда: `kubectl create configmap my-config --from-file=config.yaml`",
    "Запуск контейнера с ограничением ресурсов":
      "Команда: `kubectl run limited-container --image=my-image --limits='memory=256Mi,cpu=1'`",
    "Мониторинг контейнера с использованием Prometheus и Grafana":
      "Шаги:\n1. Запустить Prometheus и Grafana контейнеры.\n2. Настроить Prometheus для сбора метрик Docker.\n3. Создать дашборды в Grafana для визуализации метрик.",
  },
  "Kubernetes - Вопросы и Ответы для Собеседований": {
    "Что такое Kubernetes и для чего он используется?":
      "Kubernetes — это система оркестрации контейнеров, которая автоматизирует развертывание, масштабирование и управление контейнеризованными приложениями.",
    "Что такое pod в Kubernetes?":
      "Pod — это базовый объект Kubernetes, представляющий собой один или несколько контейнеров, которые запускаются на одном узле и разделяют ресурсы и сетевые настройки.",
    "Чем ReplicaSet отличается от Deployment?":
      "ReplicaSet обеспечивает поддержание заданного количества реплик подов, а Deployment предоставляет декларативный способ управления ReplicaSet, позволяя обновлять приложения и управлять их версиями.",
    "Что такое namespace и зачем он нужен?":
      "Namespace используется для разделения ресурсов внутри кластера, позволяя изолировать приложения и управлять доступом к ним.",
    "Как управлять секретами в Kubernetes?":
      "Секреты управляются с помощью объекта Secret, который хранит конфиденциальные данные, такие как пароли и токены, и может быть интегрирован в поды.",
    "Что такое Ingress и как он работает?":
      "Ingress — это объект Kubernetes, который управляет внешним доступом к сервисам внутри кластера, обычно через HTTP/HTTPS, и предоставляет правила маршрутизации трафика.",
    "Как масштабировать приложение в Kubernetes?":
      "Используйте команду `kubectl scale`, например, `kubectl scale deployment/<deployment_name> --replicas=<number>`, или настройте автоматическое масштабирование с помощью Horizontal Pod Autoscaler.",
    "Что такое StatefulSet и когда его использовать?":
      "StatefulSet используется для управления состоянием приложений, которые требуют стабильных идентификаторов, постоянных хранилищ и упорядоченных развертываний, таких как базы данных.",
    "Как обновлять приложение с минимальным простоям в Kubernetes?":
      "Используйте стратегию rolling update в Deployment, которая постепенно заменяет старые поды новыми, обеспечивая непрерывную доступность приложения.",
    "Что такое Kube-Proxy и какую роль он играет?":
      "Kube-Proxy отвечает за сетевое взаимодействие между подами, управляя правилами iptables и обеспечивая доступ к сервисам внутри кластера.",
    "Как мониторить кластер Kubernetes?":
      "Используйте инструменты мониторинга, такие как Prometheus и Grafana, а также встроенные команды kubectl для отслеживания метрик узлов и подов.",
    "Что такое Control Plane в Kubernetes?":
      "Control Plane состоит из компонентов, которые управляют состоянием кластера, включая kube-apiserver, kube-scheduler, kube-controller-manager и etcd.",
    "Как управлять доступом в Kubernetes?":
      "Используйте RBAC (Role-Based Access Control) для определения ролей и привилегий пользователей и сервисов внутри кластера.",
    "Что такое DaemonSet и для чего он используется?":
      "DaemonSet гарантирует, что копия определённого пода запущена на всех или выбранных узлах кластера, часто используется для установки агентов мониторинга или логирования.",
    "Как создавать и использовать ConfigMap в Kubernetes?":
      "Создавайте ConfigMap с помощью команды `kubectl create configmap`, затем монтируйте их в поды как файлы или используйте как переменные окружения.",
    "Что такое Kubernetes Operator и как он работает?":
      "Operator — это расширение Kubernetes, которое автоматизирует управление приложениями и их компонентами, используя пользовательские контроллеры для поддержания желаемого состояния.",
    "Как обеспечить высокую доступность кластера Kubernetes?":
      "Разверните Control Plane в нескольких узлах, используйте отказоустойчивые хранилища для etcd, настройте балансировщики нагрузки и распределите рабочие узлы по разным зонам доступности.",
  },
};
