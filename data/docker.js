window.Docker = {
  "Docker - Основные команды": {
    "docker help": "Справка по командам Docker",
    "docker info": "Системная информация о Docker",
    "docker build -t <имя> .": "Сборка образа из Dockerfile",
    "docker build --no-cache .": "Сборка без использования кэша (полная пересборка)",
    "docker images": "Список локальных образов",
    "docker rmi <имя>": "Удалить образ",
    "docker image prune": "Удалить неиспользуемые (dangling) образы",
    "docker push <имя>": "Отправить образ в registry",
    "docker pull <имя>": "Загрузить образ из registry",
    "docker tag <источник> <цель>": "Задать тег для образа",
    "docker search <имя>": "Поиск образов в registry",
    "docker history <имя>": "История слоёв образа",
    "docker save -o <путь> <имя>": "Сохранить образ в файл",
    "docker load -i <путь>": "Загрузить образ из файла",
    "docker commit <контейнер> <имя>": "Создать образ из контейнера",
    "docker inspect <имя>": "Информация об образе",
    "docker image ls -a": "Список всех образов",
    "docker rm <имя>": "Удалить образ",
    "docker tag <имя>:<тег> <репо>/<имя>:<тег>": "Тегировать для registry",
  },
  "Docker - Управление контейнерами": {
    "docker ps": "Список запущенных контейнеров",
    "docker ps -a": "Список всех контейнеров",
    "docker start <имя>": "Запуск контейнера",
    "docker stop <имя>": "Остановка контейнера",
    "docker restart <имя>": "Перезапуск контейнера",
    "docker rm <имя>": "Удалить контейнер",
    "docker rm -f <имя>": "Принудительное удаление",
    "docker logs <имя>": "Логи контейнера",
    "docker exec -it <имя> bash": "Запустить bash в контейнере",
    "docker exec -it <имя> sh": "Shell в контейнере",
    "docker inspect <имя>": "Информация о контейнере",
    "docker run -d <образ>": "Запуск в фоне",
    "docker run -p <порт>:<порт> <образ>": "Проброс портов",
    "docker rename <старое> <новое>": "Переименовать контейнер",
    "docker pause <имя>": "Приостановить контейнер",
    "docker unpause <имя>": "Возобновить контейнер",
    "docker cp <имя>:/путь /путь": "Копировать файлы",
    "docker top <имя>": "Процессы контейнера",
    "docker stats": "Статистика использования ресурсов (CPU, память)",
    "docker run --name <имя> <образ>": "Запуск с именем",
    "docker run -d --name <имя> <образ>": "Запуск в фоне с именем",
  },
  "Docker - Работа с сетями": {
    "docker network ls": "Список сетей",
    "docker network inspect <имя>": "Информация о сети",
    "docker network create <имя>": "Создать пользовательскую сеть",
    "docker network connect <сеть> <контейнер>": "Подключить к сети",
    "docker network disconnect <сеть> <контейнер>": "Отключить от сети",
    "docker network rm <имя>": "Удалить сеть",
    "docker network prune": "Удалить неиспользуемые сети",
    "docker run --network <сеть> <образ>": "Запуск в сети",
    "docker network create --driver bridge <имя>": "Создать bridge сеть",
    "docker network create --driver overlay <имя>": "Создать overlay сеть",
    "docker network create --subnet=192.168.1.0/24 <имя>": "Сеть с подсетью",
  },
  "Docker - Работа с томами": {
    "docker volume ls": "Список всех томов",
    "docker volume create <имя>": "Создать том",
    "docker volume rm <имя>": "Удалить том",
    "docker volume inspect <имя>": "Информация о томе",
    "docker volume prune": "Удалить неиспользуемые тома",
    "docker run -v <том>:/путь <образ>": "Подключить именованный том",
    "docker run --mount source=<том>,target=/путь <образ>":
      "Подключить через mount",
    "docker-compose.yml - volumes": "Конфигурация томов",
    "docker volume create --driver local <имя>": "Локальный том",
    "docker run -v /хост:/контейнер <образ>": "Монтировать директорию хоста",
    "docker volume ls -f dangling=true": "Неиспользуемые тома",
  },
  "Docker - Работа с образами": {
    "docker build -t <имя> .": "Сборка образа",
    "docker build --no-cache .": "Сборка без кэша",
    "docker images": "Список образов",
    "docker rmi <имя>": "Удалить образ",
    "docker image prune": "Очистка образов",
    "docker tag <источник> <цель>": "Тегирование",
    "docker push <имя>": "Отправка в registry",
    "docker pull <имя>": "Загрузка из registry",
    "docker search <имя>": "Поиск образов",
    "docker history <имя>": "История образа",
    "docker save/load": "Экспорт/импорт образа",
    "docker commit <контейнер> <имя>": "Создать из контейнера",
    "docker inspect <имя>": "Информация об образе",
    "docker image ls": "Список образов",
    "docker rm <имя>": "Удаление образа",
    "docker tag <имя>:<тег> <репо>/<имя>:<тег>": "Тегирование для registry",
  },
  "Docker - Docker Compose": {
    "docker-compose up": "Запуск всех сервисов",
    "docker-compose up -d": "Запуск в фоне",
    "docker-compose down": "Остановка сервисов",
    "docker-compose build": "Сборка образов",
    "docker-compose start": "Запуск остановленных",
    "docker-compose stop": "Остановка запущенных",
    "docker-compose restart": "Перезапуск",
    "docker-compose logs": "Логи всех сервисов",
    "docker-compose ps": "Состояние сервисов",
    "docker-compose exec <сервис> <команда>": "Выполнить команду в сервисе",
    "docker-compose scale <сервис>=<число>": "Масштабирование сервиса",
    "docker-compose config": "Проверка конфигурации",
    "docker-compose pull": "Обновление образов",
    "docker-compose push": "Отправка образов",
    "docker-compose run": "Запуск команды",
    "docker-compose up --build": "Сборка и запуск",
    "docker-compose up --force-recreate": "Пересоздание контейнеров",
    "docker-compose down --volumes": "Удаление с томами",
  },
  "Docker - Docker Hub": {
    "docker login": "Авторизация в Docker Hub",
    "docker push <имя>": "Отправка образа в репозиторий",
    "docker pull <имя>": "Загрузка образа из репозитория",
    "docker search <запрос>": "Поиск образов в Docker Hub",
    "docker logout": "Выход",
    "docker tag": "Тегирование",
    "docker push с тегом": "Отправка версии",
    "docker pull с тегом": "Загрузка версии",
    "docker repo create": "Создать репозиторий",
    "docker repo ls": "Список репозиториев",
    "docker repo delete": "Удалить репозиторий",
    "docker repo update": "Обновить репозиторий",
  },
  "Docker - Общие сведения": {
    Docker: "Платформа для упаковки, доставки и запуска приложений в контейнерах",
    "Docker Daemon": "Сервис для управления контейнерами",
    "Docker Client": "CLI для работы с Docker",
    "Docker Registry": "Хранилище образов",
    Контейнер: "Изолированная среда для приложения",
    Образ: "Шаблон для создания контейнера",
    Преимущества: "Изоляция, портативность, масштабируемость",
    "Контейнеры vs VM": "Легковесность и быстрый старт против полной изоляции",
    "Multi-stage build": "Многоэтапная сборка для оптимизации размера образа",
    "Docker Swarm": "Встроенный оркестратор контейнеров",
    Kubernetes: "Продвинутый оркестратор контейнеров",
    Компоненты: "Engine, Hub, Compose, Swarm, Volumes",
  },
  "Docker - Примеры": {
    Nginx: "docker run -p 8080:80 nginx",
    Том: "docker run -v data:/app nginx",
    Dockerfile: "FROM python\nCOPY . /app\nCMD python app.py",
    Сборка: "docker build -t app .",
    Запуск: "docker run -p 5000:5000 app",
    Логи: "docker logs app",
    Команда: "docker exec -it app bash",
    Сеть: "docker network create net\ndocker run --net net app",
    Compose: "web:\n  image: nginx\n  ports: 80:80",
    Backup: "docker save app > backup.tar",
    Restore: "docker load < backup.tar",
    "Multi-stage": "FROM node AS build\nFROM nginx\nCOPY --from=build",
    Ограничения: "docker run --memory 256m --cpus 1.0 app",
    Мониторинг: "Prometheus + Grafana",
  },
  "Docker - Вопросы и Ответы для Собеседований": {
    "Что такое Docker?": "Платформа для разработки, доставки и запуска приложений в контейнерах",
    "Контейнеры vs VM": "Контейнеры используют ядро хоста и легче VM, VM имеют полную изоляцию",
    Dockerfile: "Инструкции для сборки образа",
    "Docker Daemon": "Сервис управления контейнерами",
    "Docker Compose": "Управление multi-container приложениями",
    "Сети Docker": "Типы: bridge (по умолчанию), host (без изоляции), overlay (для Swarm), macvlan",
    "Тома Docker": "Постоянное хранение данных вне контейнера",
    Обновление: "Blue-green deployment, rolling updates",
    "Swarm vs K8s": "Swarm проще в настройке, K8s мощнее и функциональнее",
    Оптимизация: "Минимальные базовые образы, правильное расположение слоёв, multi-stage builds",
    Безопасность: "Регулярные обновления, минимальные права, сканирование уязвимостей",
    Масштабирование: "docker-compose scale, Docker Swarm или Kubernetes",
    Registry: "Хранилище Docker образов (публичное или приватное)",
    Мониторинг: "docker stats, cAdvisor, Prometheus с Grafana",
    "Multi-stage": "Оптимизация размера образа",
    Secrets: "Безопасное хранение и управление чувствительными данными",
    Layers: "Слои образа, каждая инструкция в Dockerfile создаёт новый слой",
    Восстановление: "docker run из сохранённого образа или бэкапа тома",
    Tags: "Версионирование образов (latest, v1.0, stable)",
    Очистка: "docker system prune для удаления неиспользуемых ресурсов",
    Прокси: "Настройка в конфиге",
    "Docker Hub": "Публичный registry",
    "Compose setup": "YAML конфигурация",
    "Swarm Mode": "docker swarm init",
    "CI/CD": "Автоматическое обновление",
    Проверка: "docker inspect",
    Ресурсы: "Ограничение памяти/CPU",
    Secrets: "Безопасное хранение данных",
    Registry: "Локальное хранилище образов",
    Labels: "Метаданные ресурсов",
  },
};
